//Generated Message Types {% for msg in all_messages %}
// Message: {{ msg.name }}, {{ msg.msg_type }}, port {{ msg.fport }}, length {{ msg.length }} bytes
//    Fields:
//        {% for field in msg.fields %}{{ field.name }} ({{ field.size }} bits{% if field.value_override %}, value={{ field.value_override }}{% endif %})
//        {% endfor %}
//{% endfor %}

//verify fields were supplied
const V = (field_list, user_data, error_list) => {
    const keys = Object.keys(user_data);
    field_list
        .filter((f) => !keys.includes(f))
        .forEach((x) => error_list.push(`required field '${x}' was not supplied`));
    keys
        .filter((f) => !field_list.includes(f))
        .forEach((x) => error_list.push(`extra field '${x}' was supplied but not used`));
}

//read bits
function R(buffer, start, end) {
    let value=0;
    for(let i=start; i<end; i++) {
        value+=(((buffer[i>>3]>>(i%8))&1)<<(i-start));
        //console.log("read byte", i>>3, "mod8", i%8, "start", start, "value", value);
    }
    return value;
}

//write bits
function W(buffer, warnings, start, end, value) {
    if (value<0 || value>(2**(end-start)))
        warnings.push("value at bit "+start+" out of bounds. value="+value)

    for(let i=start; i<end; i++) {
        let bit=((value>>(i-start))&1)<<(i%8);
        buffer[i>>3]|=bit;
        //console.log("write bit", i, "byte", i>>3, "mod8", i%8, "value", bit);
    }
}

export function decodeUplink(input) {
    //console.log("decodeUplink", input);

    let o=null; //output field array
    let e=[]; //errors
    let b=input.bytes;
    let l=input.bytes.length;
    let p=input.fPort;
    if (false){} {% for msg in uplinks %}
    else if ({%if msg.fport%}p=={{msg.fport}}{%endif%}{%if msg.fport%}{%if msg.length%} && {%endif%}{%endif%}{%if msg.length%}l=={{msg.length}}{%endif%}) {
        // Message: {{ msg.name }}, {{ msg.msg_type }}, port {{msg.fport}}, length {{ msg.length }} bytes
        o={ {{ msg.name }}: { {% for field in msg.fields%} {{field.name}}: R(b, {{field.start_index}}, {{field.end_index}}),{% endfor %} } }
    }{% endfor %}
    else {
        e=["bad port or length"]
    }

    let output = {
        data: o,
        errors: e,
        warnings: []
    }
    return output;
}


export function encodeDownlink(input) {
    //console.log("encodeDownlink", input);
    let p=input.fPort;
    let f=input.fields;

    //no error checking, missing fields will cause crash
    let b=null; //output byte array
    let w=[]; //warnings
    let e=[]; //errors
    if (false) {} {% for msg in downlinks %}
    else if (p=={{msg.fport}}) {
        // Message: {{ msg.name }}, {{ msg.msg_type }}, port {{msg.fport}}, length {{ msg.length }} bytes
        let l=[{% for field in msg.fields%}{% unless field.value_override %}"{{field.name}}", {% endunless %}{% endfor %}];
        V(l, f, e);
        if (e.length==0) {
            b=[]
            {% for field in msg.fields%}W(b, w, {{field.start_index}}, {{field.end_index}}, {% unless field.value_override %}f.{{field.name}}{% else %}{{field.value_override}}{% endunless %}); {% endfor %}
        }
    }{% endfor %}
    else {
        e=["bad port"]
    }

    let output={
        fPort: p,
        bytes: b,
        errors: e,
        warnings: w
    };

    return output;
}

export function decodeDownlink(input) {
    //console.log("decodeDownlink", input);

    let o=null; //output field array
    let e=[]; //errors
    let b=input.bytes;
    let l=input.bytes.length;
    let p=input.fPort;
    if (false){} {% for msg in downlinks %}
    else if (p=={{msg.fport}} && l=={{msg.length}}) {
        // Message: {{ msg.name }}, {{ msg.msg_type }}, port {{msg.fport}}, length {{ msg.length }} bytes
        o={ {{ msg.name }}: { {% for field in msg.fields%} {{field.name}}: R(b, {{field.start_index}}, {{field.end_index}}),{% endfor %} } }
    }{% endfor %}
    else {
        e=["bad port or length"]
    }

    let output = {
        data: o,
        errors: e,
        warnings: []
    }
    return output;
}